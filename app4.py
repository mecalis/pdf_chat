from dotenv import load_dotenv, find_dotenv
import streamlit as st
from PyPDF2 import PdfReader
from langchain_text_splitters import CharacterTextSplitter
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain_classic.chains.question_answering import load_qa_chain
from langchain_openai import ChatOpenAI
from langchain_classic.callbacks.manager import get_openai_callback
import os, certifi

openai_api_key = st.secrets["OPENAI_API_KEY"]

def main():
    st.set_page_config(page_title="K√©rdezz valamit a PDF-t≈ël!")
    st.header("K√©rdezz valamit a PDF-t≈ël! üí¨")
    st.write("Haszn√°lata:")
    st.write("1: Felt√∂ltesz egy PDF-et")
    st.write("2: A megjelen≈ë sz√∂vegmez≈ëbe bem√°solod valamelyik k√©rd√©s javaslatot, vagy kital√°lhatsz egy saj√°tot. A v√©g√©n nyomj ENTERT!")
    st.write("K√©rd√©s javaslat1: Ez a sz√∂veg egy elektronikus sz√°mla. Keresd meg benne a kisz√°ml√°zott t√©telek nev√©t, darabsz√°m√°t √©s az √°r√°t.")
    st.write("K√©rd√©s javaslat2: Ez a sz√∂veg egy elektronikus sz√°mla. Keresd meg benne a sz√°mla d√°tum√°t, a kisz√°ml√°zott t√©telek nev√©t, darabsz√°m√°t √©s az √°r√°t. Az √©rt√©keket az al√°bbi form√°tumban add vissza, t√©telenk√©nt: sz√°mla d√°tuma - megnevez√©s - mennyis√©g - egys√©g√°r")
    st.write("K√©rd√©s javaslat3: Ez a sz√∂veg egy elektronikus sz√°mla. Keresd meg benne a sz√°mla d√°tum√°t, a kisz√°ml√°zott t√©telek nev√©t, darabsz√°m√°t √©s az √°r√°t. Az √©rt√©keket az al√°bbi form√°tumban add vissza, t√©telenk√©nt: sz√°mla d√°tuma - megnevez√©s - mennyis√©g - egys√©g√°r. Semmilyen m√°s sz√∂veget ne √≠rj ki, csak a megadott form√°tum szerint a t√©telek list√°j√°t! Mindent t√©telt k√ºl√∂n sorba √≠rj!")
    openai_api_key = st.secrets["OPENAI_API_KEY"]
    # upload file
    pdf = st.file_uploader("T√∂lts fel ide egy PDF-et!", type="pdf")
    
    # extract the text
    if pdf is not None:
      pdf_reader = PdfReader(pdf)
      text = ""
      for page in pdf_reader.pages:
        text += page.extract_text()
        
      # split into chunks
      text_splitter = CharacterTextSplitter(
        separator="\n",
        chunk_size=1000,
        chunk_overlap=200,
        length_function=len
      )
      chunks = text_splitter.split_text(text)
      
      # create embeddings
      embeddings = OpenAIEmbeddings(openai_api_key=openai_api_key)
      knowledge_base = FAISS.from_texts(chunks, embeddings)
      
      # show user input
      user_question = st.text_input("K√©rdezz valamit a pdf-r≈ël:")
      if user_question:
        docs = knowledge_base.similarity_search(user_question)
        
        llm = ChatOpenAI(openai_api_key=openai_api_key)
        chain = load_qa_chain(llm, chain_type="stuff")
        with get_openai_callback() as cb:
          response = chain.run(input_documents=docs, question=user_question)
          print(cb)
           
        st.write(response)
    

if __name__ == '__main__':

    main()







